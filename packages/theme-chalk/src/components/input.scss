@use 'sass:map';
@use '../mixins/mixins.scss' as *;
@use '../mixins/button' as *;
@use '../common//var.scss' as *;

$input: () !default;
$input: map.merge(
  (
    'bg-color': getCssVar('fill-color', 'blank'),
    'width': 100%,
    'border-color': getCssVar('border-color'),
    'border-radius': getCssVar('border-radius', 'base'),
    'text-color': getCssVar('text-color', 'regular'),
    'height': calc(getCssVar('component-size')),
    'inner-height': calc(getCssVar('component-size') - 2 * $border-width),
    'font-size': getCssVar('font-size', 'base'),
    'font-size-large': getCssVar('font-size', 'base'),
    'font-size-small': getCssVar('font-size', 'extra-small'),
    'bg-color-disabled': getCssVar('fill-color', 'light'),
    'border-color-disabled': getCssVar('border-color', 'light'),
    'text-color-disabled': getCssVar('text-color', 'disabled'),
  ),
  $input
);

$input-padding-horizontal: () !default;
$input-padding-horizontal: map.merge(
  (
    'large': 16px,
    'default': 12px,
    'small': 8px,
  ),
  $input-padding-horizontal
);

@include b(input) {
  @include set-component-css-var(input, $input);
}
@include b(input) {
  position: relative;
  font-size: getCssVar('input', 'font-size');
  display: inline-flex;
  width: getCssVar('input', 'width');
  line-height: getCssVar('input', 'height');
  box-sizing: border-box;
  vertical-align: middle;

  @include e(wrapper) {
    display: inline-flex;
    flex-grow: 1;
    align-items: center;
    justify-content: center;
    padding: $border-width map.get($input-padding-horizontal, 'default')-$border-width;
    background-color: getCssVar('input', 'bg-color');
    border-radius: getCssVar('input', 'border-radius');
    box-shadow: 0 0 0 1px getCssVar('input', 'border-color') inset;
    transition: getCssVar('transition-box-shadow');
    transform: translate3d(0, 0, 0);
    &:hover {
      box-shadow: 0 0 0 1px getCssVar('border-color', 'hover') inset;
    }

    @include when(focus) {
      box-shadow: 0 0 0 1px getCssVar('border-color', 'focus') inset;
    }

    & > span {
      & + span {
        margin-left: 10px;
      }
    }
  }

  @include e(inner) {
    width: 100%;
    flex-grow: 1;
    -webkit-appearance: none;
    color: getCssVar('input', 'text-color');
    font-size: inherit;
    height: getCssVar('input-inner-height');
    line-height: getCssVar('input-inner-height');
    padding: 0;
    outline: none;
    border: none;
    background: none;
    box-sizing: border-box;

    &:focus {
      outline: none;
    }

    &::placeholder {
      color: map.get($text-color, 'placeholder');
    }
  }

  @include when(disabled) {
    cursor: not-allowed;
    @include e(wrapper) {
      cursor: not-allowed;
      background-color: getCssVar('input', 'bg-color-disabled');
      box-shadow: 0 0 0 1px getCssVar('border-color', 'disabled') inset;
    }
    @include e(inner) {
      cursor: not-allowed;
      color: getCssVar('input', 'text-color', 'disabled');
    }
  }

  @include e(clear) {
    font-size: getCssVar('font-size', 'small');
    .#{$namespace}-icon {
      cursor: pointer;
      &:hover {
        color: map.get($text-color, 'regular');
      }
    }
  }

  @include e(password) {
    font-size: calc(getCssVar('font-size', 'small') + 2px);
    .#{$namespace}-icon {
      cursor: pointer;
      &:hover {
        color: map.get($text-color, 'regular');
      }
    }
  }

  @each $slot in (prefix, suffix, clear, password) {
    @include e($slot) {
      display: inline-flex;
      white-space: nowrap;
      flex-shrink: 0;
      flex-wrap: nowrap;
      height: 100%;
      text-align: center;
      color: map.get($text-color, 'placeholder');
      transition: all getCssVar('transition-duration');
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      @include css-var-from-global('input-height', ('component-size', $size));
      @include css-var-from-global(
        'input-inner-height',
        ('component-size', $size)
      );
      font-size: getCssVar('input', 'font-size', $size);
    }
  }
}

// textaea
@include b(textarea) {
  @include set-component-css-var('input', $input);
}
@include b(textarea) {
  position: relative;
  font-size: getCssVar('font-size', 'base');
  display: inline-block;
  width: getCssVar('input', 'width');
  @include e(wrapper) {
    display: inline-flex;
    width: 100%;
    align-items: center;
    justify-content: center;
    background-color: getCssVar('input', 'bg-color');
    border-radius: getCssVar('input', 'border-radius');
    box-shadow: 0 0 0 1px getCssVar('input', 'border-color') inset;
    transition: getCssVar('transition-box-shadow');
    transform: translate3d(0, 0, 0);
    box-sizing: border-box;
    &:hover {
      box-shadow: 0 0 0 1px getCssVar('border-color', 'hover') inset;
    }

    @include when(focus) {
      box-shadow: 0 0 0 1px getCssVar('border-color', 'focus') inset;
    }
  }

  @include e(inner) {
    width: 100%;
    flex-grow: 1;
    -webkit-appearance: none;
    color: getCssVar('input', 'text-color');
    font-size: inherit;
    font-family: inherit;
    line-height: 1.5;
    padding: 5px map.get($input-padding-horizontal, 'default')-$border-width;
    outline: none;
    border: none;
    background: none;
    box-sizing: border-box;

    &:focus {
      outline: none;
    }
  }

  @include when(disabled) {
    cursor: not-allowed;
    @include e(wrapper) {
      cursor: not-allowed;
      background-color: getCssVar('input', 'bg-color-disabled');
      box-shadow: 0 0 0 1px getCssVar('border-color', 'disabled') inset;
    }
    @include e(inner) {
      cursor: not-allowed;
      color: getCssVar('input', 'text-color', 'disabled');
    }
  }

  @include when(clearable) {
    @include e(inner) {
      padding-right: calc(getCssVar('font-size', 'small') + 1em + 6px);
    }
  }

  @include e(clear) {
    position: absolute;
    right: 11px;
    top: 0;
    display: inline-flex;
    white-space: nowrap;
    flex-shrink: 0;
    flex-wrap: nowrap;
    height: 100%;
    text-align: center;
    font-size: getCssVar('font-size', 'small');
    color: map.get($text-color, 'placeholder');
    margin-left: 1em;
    .#{$namespace}-icon {
      cursor: pointer;
      &:hover {
        color: map.get($text-color, 'regular');
      }
    }
  }
}
